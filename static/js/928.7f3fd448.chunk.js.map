{"version":3,"file":"static/js/928.7f3fd448.chunk.js","mappings":"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","sources":["features/viewer/components/viewport/splat/SplatSortWorker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n\n/// <reference lib=\"WebWorker\" />\n\nlet maxSplats = Infinity;\nlet buffer;\nlet vertexCount = 0;\nlet viewProj = [];\n// 6*4 + 4 + 4 = 8*4\n// XYZ - Position (Float32)\n// XYZ - Scale (Float32)\n// RGBA - colors (uint8)\n// IJKL - quaternion/rot (uint8)\nconst rowLength = 3 * 4 + 3 * 4 + 4 + 4;\nlet depthMix = new Float64Array(); // Changed from BigInt64Array to Float64Array\nlet lastProj = [];\n\nconst runSort = (viewProj) => {\n  if (!buffer) return;\n\n  const effectiveVertexCount = Math.min(vertexCount, maxSplats);\n\n  const f_buffer = new Float32Array(buffer);\n  const u_buffer = new Uint8Array(buffer);\n\n  const quat = new Float32Array(4 * effectiveVertexCount);\n  const scale = new Float32Array(3 * effectiveVertexCount);\n  const center = new Float32Array(3 * effectiveVertexCount);\n  const color = new Float32Array(4 * effectiveVertexCount);\n\n  if (depthMix.length !== effectiveVertexCount) {\n    depthMix = new Float64Array(effectiveVertexCount); // Changed from BigInt64Array to Float64Array\n    const indexMix = new Uint32Array(depthMix.buffer);\n    for (let j = 0; j < effectiveVertexCount; j++) {\n      indexMix[2 * j] = j;\n    }\n  } else {\n    let dot =\n      lastProj[2] * viewProj[2] +\n      lastProj[6] * viewProj[6] +\n      lastProj[10] * viewProj[10];\n    if (Math.abs(dot - 1) < 0.01) {\n      return;\n    }\n  }\n\n  const floatMix = new Float32Array(depthMix.buffer);\n  const indexMix = new Uint32Array(depthMix.buffer);\n\n  for (let j = 0; j < effectiveVertexCount; j++) {\n    let i = indexMix[2 * j];\n    floatMix[2 * j + 1] =\n      10000 -\n      (viewProj[2] * f_buffer[8 * i + 0] +\n        viewProj[6] * f_buffer[8 * i + 1] +\n        viewProj[10] * f_buffer[8 * i + 2]);\n  }\n\n  lastProj = viewProj;\n\n  depthMix.sort();\n\n  for (let j = 0; j < effectiveVertexCount; j++) {\n    const i = indexMix[2 * j];\n\n    quat[4 * j + 0] = (u_buffer[32 * i + 28 + 0] - 128) / 128;\n    quat[4 * j + 1] = (u_buffer[32 * i + 28 + 1] - 128) / 128;\n    quat[4 * j + 2] = (u_buffer[32 * i + 28 + 2] - 128) / 128;\n    quat[4 * j + 3] = (u_buffer[32 * i + 28 + 3] - 128) / 128;\n\n    center[3 * j + 0] = f_buffer[8 * i + 0];\n    center[3 * j + 1] = f_buffer[8 * i + 1];\n    center[3 * j + 2] = f_buffer[8 * i + 2];\n\n    color[4 * j + 0] = u_buffer[32 * i + 24 + 0] / 255;\n    color[4 * j + 1] = u_buffer[32 * i + 24 + 1] / 255;\n    color[4 * j + 2] = u_buffer[32 * i + 24 + 2] / 255;\n    color[4 * j + 3] = u_buffer[32 * i + 24 + 3] / 255;\n\n    scale[3 * j + 0] = f_buffer[8 * i + 3 + 0];\n    scale[3 * j + 1] = f_buffer[8 * i + 3 + 1];\n    scale[3 * j + 2] = f_buffer[8 * i + 3 + 2];\n  }\n\n  self.postMessage({ quat, center, color, scale, viewProj }, [\n    quat.buffer,\n    center.buffer,\n    color.buffer,\n    scale.buffer,\n  ]);\n};\n\nconst throttledSort = () => {\n  if (!sortRunning) {\n    sortRunning = true;\n    let lastView = viewProj;\n    runSort(lastView);\n    setTimeout(() => {\n      sortRunning = false;\n      if (lastView !== viewProj) {\n        throttledSort();\n      }\n    }, 0);\n  }\n};\n\nlet sortRunning;\nself.onmessage = (e) => {\n  if (e.data.buffer) {\n    buffer = e.data.buffer;\n    vertexCount = e.data.vertexCount;\n  } else if (e.data.vertexCount) {\n    vertexCount = e.data.vertexCount;\n  } else if (e.data.view) {\n    viewProj = e.data.view;\n    maxSplats = e.data.maxSplats;\n    throttledSort();\n  }\n};\n"],"names":["buffer","maxSplats","Infinity","vertexCount","viewProj","depthMix","Float64Array","lastProj","throttledSort","sortRunning","lastView","effectiveVertexCount","Math","min","f_buffer","Float32Array","u_buffer","Uint8Array","quat","scale","center","color","length","indexMix","Uint32Array","j","dot","abs","floatMix","i","sort","self","postMessage","runSort","setTimeout","onmessage","e","data","view"],"sourceRoot":""}